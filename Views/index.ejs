<!--  -->
<!DOCTYPE html>
<html>
	<head>
		<title>CHAT</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
		<link rel="stylesheet" type="text/css" href="/static/style.css">
	</head>
	<body>

		<div class="container">
			<div class="root">

				<div class="users-bar-parent">
					<div class="title"><%= name %></div>
					<div class="user-bar">
						<% users.forEach(user => { %>
							<div class="user <%= user.online %><% user.online ? 'online' : '' %>">
								<div class="name"><%= user.name %></div>									
							</div>
						<% }) %>
					</div>
					<div class="online-users">
						<div class="blank">&nbsp;</div><span class="text"><%= online %> çevrimiçi</span>
					</div>
				</div>

				<div class="message-area-parent">
					<div class="message-area">

						<% initialMessages.forEach(msg => { %>
						<div class="<%= msg.id == id ? 'my-message' : 'message' %>">
							<div class="sender"><%= msg.name %></div>
							<div class="msg"><%= msg.msg %></div>
						</div>
						<% }) %>
					</div>

					<div class="message-send">
						<input type="" placeholder="Mesaj Gönder" id="user-input" spellcheck autocomplete = "false">
						<button><i class="fa fa-paper-plane"></i></button>
					</div>
				</div>

			</div>
		</div>
		<script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
		<script type="text/javascript" src="/socket.io/socket.io.js"></script>
		<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
		<script type="text/javascript">
		
		$(document).ready(() => {

                   
			const input = document.getElementById('user-input');
			const submitButton = document.querySelector("button");
			const caseEelement = document.getElementsByClassName("case");
			const onLineUsersElement = document.querySelector('.user-bar');

			let id = "<%= id %>"
			var socket = io.connect({query : `id=${id}`}); 

			document.querySelector(".message-area-parent").scrollTop = document.querySelector(".message-area-parent").scrollHeight 

			const sendMessage = (id , msg) => socket.emit('msg' , {id , msg})

			const getMessage = msgDetail => {
				let {msg , name , sid} = msgDetail;
				let msgParentElement = document.createElement("div");
				msgParentElement.className = socket.id == msgDetail.id ? "my-message" : "message";

				let senderElement = document.createElement("div");
				let msgElement = document.createElement("div")

				senderElement.innerText = name;
				msgElement.innerText = msg;

				msgElement.className = "msg";
				senderElement.className = "sender";
				msgParentElement.appendChild(senderElement);
				msgParentElement.appendChild(msgElement);
				// console.log(msgParentElement);
				document.querySelector('.message-area').appendChild(msgParentElement);
				document.querySelector(".message-area-parent").scrollTop = document.querySelector(".message-area-parent").scrollHeight 

			}

			const updateOnlineUsers = users => {
				onLineUsersElement.innerText = "";
				users.forEach(user => {
					let parentUserElement = document.createElement("div");
					parentUserElement.className = `user ${user.online}`;
					let childEl = document.createElement("div");
					childEl.className = "name";
					childEl.innerText = user.name;
					parentUserElement.appendChild(childEl);
					onLineUsersElement.appendChild(parentUserElement);
				})
			}


			// socket.emit('on' , {sid : socket.id , id : "<%= id %>"})
			let nAllow = false;

			submitButton.addEventListener('click', () => sendMessage(id , input.value))
			addEventListener('keydown' , key => {
				if (key.code == "Enter" && document.activeElement.id == "user-input"){
					sendMessage(id , input.value);
				}

				if(key.code == "KeyV" && document.activeElement !== input) nAllow = !nAllow;
			})


			
			var typing = false;
			var timeout = undefined;

			function timeoutFunction(){
			  typing = false;
			  
			}

			function onKeyDownNotEnter(){
			  if(typing == false) {
			    typing = true
			    socket.emit("typing" , id);
			    timeout = setTimeout(timeoutFunction, 3000);
			  } else {
			    clearTimeout(timeout);
			    timeout = setTimeout(timeoutFunction, 3000);
			  }

			}
			

			 			
			socket.on('online' , count => {
				document.querySelector('.users-bar-parent .online-users .text')
					.innerText = `${count.online} çevrimiçi`;

				updateOnlineUsers(count.onlineUsers)

			})
			
			const a = new Audio("http://prrivchet.herokuapp.com/static/hit.mp3")

			socket.on('msg' , data => {
				getMessage(data);
				if (data.id == socket.id) {
					input.value = "";
				}
				if (data.id !== socket.id && nAllow) {
					a.play();
				}
			})
		
		})
		</script>
	</body>
</html>